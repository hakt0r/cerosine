// Generated by CoffeeScript 1.6.3
(function() {
  var UIButton,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UIButton = (function() {
    UIButton.count = 0;

    UIButton.byId = {};

    function UIButton(opts) {
      var hide,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.parent = opts.parent, this.tooltip = opts.tooltip, this.click = opts.click, this.init = opts.init, this["class"] = opts["class"], this.id = opts.id, this.title = opts.title, hide = opts.hide;
      if (typeof this.parent === "string") {
        this.parent = document.querySelector(this.parent);
      }
      if (this.id == null) {
        this.id = "button-" + (UIButton.count++);
      }
      if (this.title == null) {
        this.title = this.id;
      }
      if (this["class"] == null) {
        this["class"] = this.id;
      }
      $(this.parent).append("<button class=\"" + this["class"] + "\" id=\"" + this.id + "-btn\">" + this.title + "</button>");
      this.query = this.$ = $("#" + this.id + "-btn");
      if ((hide != null) && hide === true) {
        this.query.hide();
      }
      if (this.click != null) {
        this.query.on("click", function() {
          return _this.click.apply(_this, arguments);
        });
      }
      UIButton.byId[this.id] = this;
      if (this.init != null) {
        this.init();
      }
      if (($.tooltip != null) && (this.tooltip != null)) {
        this.query.attr('title', this.tooltip);
        this.query.tooltip();
      }
    }

    UIButton.prototype.show = function() {
      return this.query.show();
    };

    UIButton.prototype.hide = function() {
      return this.query.hide();
    };

    return UIButton;

  })();

  window.UIButton = UIButton;

}).call(this);
