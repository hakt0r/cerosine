// Generated by CoffeeScript 1.6.3
(function() {
  var FileUpload,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FileUpload = (function(_super) {
    __extends(FileUpload, _super);

    function FileUpload(file, meta) {
      var chunk, id, last, r, segment, t_start, work, worker,
        _this = this;
      FileUpload.__super__.constructor.call(this, {
        title: "Upload: " + file.name,
        progress: true
      });
      t_start = Date.now() / 1000;
      id = null;
      worker = null;
      this.ws = Api.socket;
      last = 0;
      segment = 0;
      chunk = 1024 * 16;
      r = new FileReader(file);
      work = function() {
        var data, eta, kbps, newlen, percent, time_passed;
        newlen = r.result.length;
        if (r.result != null) {
          if (newlen > last + chunk || file.size === newlen) {
            if (Api.socket.bufferedAmount < 2 * chunk) {
              data = r.result.substr(last, chunk);
              Api.send_binary(id, segment++, data);
              last += chunk;
              percent = (last / file.size * 100).toFixed(0);
              time_passed = (Date.now() / 1000) - t_start;
              kbps = segment * 16 / time_passed;
              eta = ((file.size / 1024) / kbps) - time_passed;
              eta = eta.toFixed(2);
              kbps = kbps.toFixed(2);
              _this.progress(percent, kbps + "kbps eta: " + eta + "s");
              if (last >= file.size) {
                console.log("done", kbps);
                clearInterval(worker);
                Api.send({
                  upload: {
                    done: {
                      id: id
                    }
                  }
                });
                return _this.done();
              }
            } else {
              return console.log("not_working: buffer");
            }
          } else {
            return console.log("not_working: no data");
          }
        }
      };
      r.onerror = function(e) {
        debugger;
      };
      r.readAsBinaryString(file);
      Api.register({
        upload: function(reply) {
          if (reply.error === false) {
            console.log('starting upload', reply.id);
            id = reply.id;
            return worker = setInterval(work, 333);
          } else {
            return console.log(reply.error);
          }
        }
      });
      Api.send({
        upload: {
          request: {
            size: file.size,
            name: file.name,
            type: file.type,
            meta: meta
          }
        }
      });
    }

    return FileUpload;

  })(UITask);

  window.FileUpload = FileUpload;

}).call(this);
